// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model TimeWindow {
  id            Int          @id @default(autoincrement())
  startTime     DateTime
  endTime       DateTime
  scheduleId    Int
  appointmentId Int?         @unique
  schedule      Schedule     @relation(fields: [scheduleId], references: [id])
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
}

model User {
  id            String        @default(cuid()) @id
  name          String?
  email         String?       @unique
  createdAt     DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime      @updatedAt @map(name: "updated_at")
  accounts      Account[]
  emailVerified DateTime?
  image         String?
  sessions      Session[]
  userRole      UserRole      @default(CLIENT)
  schedules     Schedule[]    @relation("ProviderSchedules")
  appointments  Appointment[] @relation("ClientAppointments")
  @@map(name: "users")
}

enum UserRole {
  CLIENT
  PROVIDER
}

model Schedule {
  id          Int           @id @default(autoincrement())
  providerId  String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  timeWindows TimeWindow[]
  provider    User          @relation(fields: [providerId], references: [id], name: "ProviderSchedules")
  appointments Appointment[]
}

model Appointment {
  id          Int           @id @default(autoincrement())
  clientId    String
  scheduleId  Int
  startTime   DateTime
  endTime     DateTime
  confirmed   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  expiresAt   DateTime
  client      User          @relation(fields: [clientId], references: [id], name: "ClientAppointments")
  schedule    Schedule      @relation(fields: [scheduleId], references: [id])
  timeWindows TimeWindow[]

  @@index([clientId, scheduleId], name: "appointment_unique")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}